@model IEnumerable<SISGESAL.Models.ViewModels.TransaccionDetalleViewModel>

@{
    ViewData["Title"] = "Detalles de Transacciones";
}

<h2>@ViewData["Title"]</h2>


@if (ViewBag.ErrorMessage != null)
{
    <div class="alert alert-warning">
        @ViewBag.ErrorMessage
    </div>
}


<table id="table"  class="table table-striped">
    <thead>
        <tr>
           @*  <th>Identificador</th> *@
            <th>Número ingresos</th>
            <th>Código Almacen</th>
            <th>Descripción Almacen</th>
            @* <th>Código Artículo</th> *@
            <th>Descripción Artículo</th>
            <th>Operación</th>
            <th>Fecha Ingreso</th>
            <th>Entrada</th>
            <th>Precio Unitario</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
               @*  <td>@item.IdentificadorTrans</td> *@
                <td>@item.Ningresos</td>
                <td>@item.CodigoAlmacen</td>
                <td>@item.CodigoAlmacenNavigation.Descripcion</td>
                @* <td>@item.CodigoArticulo</td> *@
                <td>@item.CodigoArticuloNavigation.DescripcionArticulo</td>
                <td>@item.Operacion</td>
                <td>@item.FechaIngreso.ToShortDateString()</td>
                <td>@item.Entrada</td>
                <td>@item.PrecioUnitario</td>
            </tr>
        }
    </tbody>
</table>


<div class="pagination" id="pagination"></div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const rowsPerPage = 15;
            const table = document.getElementById('table');
            const pagination = document.getElementById('pagination');
            const rows = Array.from(table.querySelectorAll('tbody tr'));
            const pageCount = Math.ceil(rows.length / rowsPerPage);
            let currentPage = 1;

            function showPage(page) {
                const start = (page - 1) * rowsPerPage;
                const end = start + rowsPerPage;
                rows.forEach((row, index) => {
                    row.style.display = index >= start && index < end ? '' : 'none';
                });
                currentPage = page;
                updatePagination();
            }

            function updatePagination() {
                pagination.innerHTML = '';
                const buttonPrev = document.createElement('li');
                buttonPrev.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
                buttonPrev.innerHTML = `<a class="page-link" href="#">Página Anterior</a>`;
                buttonPrev.addEventListener('click', () => {
                    if (currentPage > 1) {
                        showPage(currentPage - 1);
                    }
                });
                pagination.appendChild(buttonPrev);

                for (let i = 1; i <= pageCount; i++) {
                    const button = document.createElement('li');
                    button.className = `page-item ${i === currentPage ? 'active' : ''}`;
                    button.innerHTML = `<a class="page-link" href="#">${i}</a>`;
                    button.addEventListener('click', () => showPage(i));
                    pagination.appendChild(button);
                }

                const buttonNext = document.createElement('li');
                buttonNext.className = `page-item ${currentPage === pageCount ? 'disabled' : ''}`;
                buttonNext.innerHTML = `<a class="page-link" href="#">Página Siguiente</a>`;
                buttonNext.addEventListener('click', () => {
                    if (currentPage < pageCount) {
                        showPage(currentPage + 1);
                    }
                });
                pagination.appendChild(buttonNext);
            }

            showPage(1);
        });

    </script>
}